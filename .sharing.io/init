#!/bin/bash

cd $(dirname $0)
GIT_ROOT=$(git rev-parse --show-toplevel)
cd $GIT_ROOT

PROW_NAMESPACE=prow
PROW_JOB_NAMESPACE=prow-workloads
NAMESPACES=(
    ${PROW_NAMESPACE}
    ${PROW_JOB_NAMESPACE}
)

if [ ! -f /var/run/secrets/kubernetes.io/serviceaccount/namespace ]; then
    echo "Error: Running prow-config in Pair requires Kubernetes."
    exit 1
fi
/usr/local/bin/tmate-wait-for-socket.sh

GIT_ROOT=$(git rev-parse --show-toplevel)
GIT_UPSTREAM_URL=$(gh api repos/:owner/:repo --jq '.' | jq -r '.ssh_url' 2>&1)
GIT_BRANCH_CURRENT=$(git branch --show-current)
rm -f $GIT_ROOT/.sharing.io/setup-complete

FOLDER="$GIT_ROOT/.sharing.io"

# ensure the same hmac
if [ ! -f $FOLDER/.hmac ] ; then
    HMAC=$(openssl rand -hex 20)
else
    HMAC=$(cat $FOLDER/.hmac)
fi

# ensure the same cookie
if [ ! -f $FOLDER/.cookie ] ; then
    COOKIE=$(openssl rand -base64 32)
    echo $COOKIE > $FOLDER/.cookie
else
    COOKIE=$(cat $FOLDER/.cookie)
fi

PROW_CONFIG_IS_FORKED_NOTIFIED=false
PROW_IS_FORKED=true
while ! gh repo list --fork | grep -q -E "^${SHARINGIO_PAIR_USER}/prow-config\W+"; do
    PROW_IS_FORKED=false
    if [ ! $PROW_CONFIG_IS_FORKED_NOTIFIED = "true" ]; then
        echo "Please fork '${GIT_REMOTE_URL}' to continue."
        PROW_CONFIG_IS_FORKED_NOTIFIED=true
    fi
    sleep 3s
done

if [ ! $PROW_IS_FORKED = "true" ]; then
    echo "Success! You forked '${GIT_REMOTE_URL}'."
else
    echo "Using your existing fork."
fi

# ensure communication with minio cli to the bucket
mc alias set \
    prow \
    http://prow-minio.${PROW_NAMESPACE}.svc.cluster.local:9000 \
    prow-minio \
    prow-minio

for NS in ${NAMESPACES[*]}; do
  kubectl get ns "${NS}" 2>&1 > /dev/null || kubectl create ns "${NS}"
done
kubectl label ns "${PROW_NAMESPACE}" cert-manager-tls=sync --overwrite

if [ ! -f $GIT_ROOT/.sharing.io/.oauth-env ]; then
    tmate -F -v -S $TMATE_SOCKET new-window -d -c "$PWD" -n prow-setup $GIT_ROOT/.sharing.io/prepare-env.sh
    PROW_COMPLETE_SETUP_NOTIFIED=false
    while [ ! -f $GIT_ROOT/.sharing.io/setup-complete ]; do
        if [ $PROW_COMPLETE_SETUP_NOTIFIED = "true" ]; then
            echo "Waiting for Prow setup to complete"
        fi
        sleep 1s
    done
fi

export $(cat $FOLDER/.oauth-env | xargs)

kubectl -n "${PROW_NAMESPACE}" get secrets prow-github-hmac -o=jsonpath='{.data.hmac}' | base64 -d | yq e -P 2> /dev/null > $FOLDER/.hmac-live
if [ $? -eq 0 ]; then
    mv $FOLDER/.hmac-live $FOLDER/.hmac
fi

kubectl \
    -n "${PROW_NAMESPACE}" \
    create secret generic prow-github-hmac \
    --from-file=hmac=<(yq e -P < $FOLDER/.hmac) \
    --dry-run=client -o yaml \
    | kubectl apply -f -

kubectl \
    -n "${PROW_NAMESPACE}" \
    create secret generic prow-github-cookie \
    --from-literal=secret="$COOKIE" \
    --dry-run=client -o yaml \
    | kubectl apply -f -

kubectl \
    -n "${PROW_NAMESPACE}" \
    create secret generic prow-github-oauth \
    --from-literal=oauth="$OAUTH_BOT_TOKEN" \
    --dry-run=client -o yaml \
    | kubectl apply -f -

kubectl \
    -n "${PROW_NAMESPACE}" \
    create secret generic prow-github-oauth-config \
    --from-file=secret=<(envsubst < $FOLDER/github-oauth-template.yaml) \
    --dry-run=client -o yaml \
    | kubectl apply -f -

envsubst < $FOLDER/prow-config-template.yaml > $FOLDER/prow-config-rendered.yaml
kubectl -n "${PROW_NAMESPACE}" \
    create configmap prow-config \
    --from-file=config\.yaml=$FOLDER/prow-config-rendered.yaml \
    --dry-run=client \
    -o yaml \
    | kubectl apply -f -

envsubst < $FOLDER/prow-plugins-template.yaml > $FOLDER/prow-plugins-rendered.yaml
kubectl -n "${PROW_NAMESPACE}" \
    create configmap prow-plugins \
    --from-file=plugins\.yaml=$FOLDER/prow-plugins-rendered.yaml \
    --dry-run=client \
    -o yaml \
    | kubectl apply -f -

envsubst < "${FOLDER}"/prow.yaml \
    | kubectl apply -f -

kubectl -n prow rollout restart $(kubectl -n prow get deployments -o=jsonpath='{range .items[*]}{.kind}/{.metadata.name} {end}') 2> /dev/null
