#+TITLE: prow.cncf.io infrastructure

Terraform configuration for prow.cncf.io

* Dependencies
- [[https://www.terraform.io/downloads.html][terraform]]
- [[https://aws.amazon.com/cli/][aws cli]]
- [[https://kubernetes.io/docs/tasks/tools/install-kubectl/][kubectl]]
- [[https://helm.sh/docs/intro/install/][helm]]

* Initial things
** Configure aws cli

Set up the aws cli with your aws account.
#+begin_src tmate :window prow-config
aws configure
#+end_src

* Deploying
** Init

Initialize terraform with the plugins that are required.
#+begin_src tmate :window prow-config
terraform init
#+end_src

** Plan

Using plan, verify that the actions performed will be the correct ones.
#+begin_src tmate :window prow-config
terraform plan
#+end_src

** Apply

Create the infrastructure using apply.
#+begin_src tmate :window prow-config
terraform apply -auto-approve
#+end_src

** Configure kubectl to use the new cluster

Find the cluster name:
#+begin_src tmate :window prow-config
aws eks list-clusters
#+end_src

Set current context to be the newly created cluster
#+begin_src tmate :window prow-config
aws eks --region ap-southeast-2 update-kubeconfig --name prow-LltO5Bjk
#+end_src

Check cluster connectivity:
#+BEGIN_SRC shell
kubectl cluster-info
#+END_SRC

** Configure aws auth for EKS cluster

Configure the user access for the cluster:

#+begin_src yaml :tangle ./manifests/aws-auth-configmap.yaml
  data:
    mapUsers: |
      - userarn: arn:aws:iam::928655657136:user/prow.cncf.io
        username: prow
        groups:
          - system:masters
      - userarn: arn:aws:iam::928655657136:user/bb@ii.coop
        username: bb
        groups:
          - system:masters
      - userarn: arn:aws:iam::928655657136:user/hh@ii.coop
        username: hh
        groups:
          - system:masters
      - userarn: arn:aws:iam::928655657136:user/zz@ii.coop
        username: zz
        groups:
          - system:masters
      - userarn: arn:aws:iam::928655657136:user/rkielty@rokitds.com
        username: rob
        groups:
          - system:masters
#+end_src

#+begin_src tmate :window prow-config
kubectl -n kube-system patch configmap aws-auth --patch "$(cat aws-auth-configmap.yaml)"
#+end_src

#+RESULTS:
#+BEGIN_example
configmap/aws-auth patched
#+END_example

* Install core services
** nginx-ingress
*** Prepare
#+name: add stable helm repo
#+begin_src shell :results silent
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#+end_src

#+name: create nginx-ingress namespace
#+begin_src shell :results silent
kubectl create ns nginx-ingress -o yaml --dry-run=client \
    | kubectl apply -f -
#+end_src

*** Configure
#+name: nginx ingress values
#+begin_src yaml :tangle ./manifests/nginx-ingress-values.yaml
controller:
  service:
    externalTrafficPolicy: Local
    type: LoadBalancer
  publishService:
    enabled: true
  config:
    service-tokens: "false"
    use-proxy-protocol: "false"
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
  metrics:
    enabled: true
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ingress-nginx
          topologyKey: "kubernetes.io/hostname"

serviceAccount:
  create: true

rbac:
  create: true
#+end_src

*** Template
#+name: install nginx-ingress
#+begin_src shell :results silent
helm template nginx-ingress  \
    -f ./manifests/nginx-ingress-values.yaml \
    --namespace nginx-ingress \
    --version 4.0.18 \
    ingress-nginx/ingress-nginx \
    > ./manifests/nginx-ingress.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/nginx-ingress.yaml
#+end_src

*** Observe

#+begin_src shell :results silent
kubectl -n nginx-ingress get pods
#+end_src

#+RESULTS:
#+BEGIN_example
NAME                                             READY   STATUS    RESTARTS   AGE
nginx-ingress-controller-6fd5487458-2tghm        1/1     Running   0          38s
nginx-ingress-controller-6fd5487458-54dsw        1/1     Running   0          38s
nginx-ingress-controller-6fd5487458-fnpmz        1/1     Running   0          54s
nginx-ingress-default-backend-5b967cf596-859wm   1/1     Running   0          54s
#+END_example

#+begin_src shell :results silent
kubectl -n nginx-ingress get svc
#+END_SRC

#+RESULTS:
#+BEGIN_example
NAME                               TYPE           CLUSTER-IP       EXTERNAL-IP                                                                    PORT(S)                      AGE
nginx-ingress-controller           LoadBalancer   172.20.185.44    a6db92a5df19741c8a43dc8aa8e486e2-1450765144.ap-southeast-2.elb.amazonaws.com   80:30476/TCP,443:32692/TCP   2m21s
nginx-ingress-controller-metrics   ClusterIP      172.20.144.145   <none>                                                                         9913/TCP                     2m21s
nginx-ingress-default-backend      ClusterIP      172.20.102.168   <none>                                                                         80/TCP                       2m21s
#+END_example

** Cert-Manager
*** Prepare
#+begin_src shell :results silent
curl -L -o ./manifests/cert-manager.yaml https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/cert-manager.yaml
#+end_src

*** Observe
#+begin_src tmate :window prow-config
kubectl -n cert-manager get pods
#+END_SRC

#+RESULTS:
#+BEGIN_example
NAME                                       READY   STATUS    RESTARTS   AGE
cert-manager-7ddc5b4db-jt5j6               1/1     Running   0          88s
cert-manager-cainjector-6644dc4975-b2r7n   1/1     Running   0          88s
cert-manager-webhook-7b887475fb-d4cmz      1/1     Running   0          88s
#+END_example

* Install Prow
** Prepare
#+begin_src shell :results silent
curl -o ./manifests/prow.yaml -L https://github.com/kubernetes/test-infra/raw/master/config/prow/cluster/starter/starter-gcs.yaml
#+end_src

*** Template
#+begin_src shell :results silent
GITHUB_APP_ID='${GITHUB_APP_ID}'
GITHUB_APP_SECRET='${GITHUB_APP_SECRET}'
GITHUB_WEBHOOK_HMAC='${GITHUB_WEBHOOK_HMAC}'
GITHUB_ORG=cncf-infra
PROW_DOMAIN=prow.cncf.io

sed -i "s/<<insert-downloaded-cert-here>>/${GITHUB_APP_SECRET}/g" ./manifests/prow.yaml
sed -i "s/<<insert-the-app-id-here>>/${GITHUB_APP_ID}/g" ./manifests/prow.yaml
sed -i "s/<< insert-hmac-token-here >>/${GITHUB_WEBHOOK_HMAC}/g" ./manifests/prow.yaml
sed -i "s/<< your-domain.com >>/${PROW_DOMAIN}/g" ./manifests/prow.yaml
sed -i "s/<< your_github_org >>/${GITHUB_ORG}/g" ./manifests/prow.yaml
sed -i "s/cert-manager.io\/cluster-issuer: letsencrypt-staging/cert-manager.io\/cluster-issuer: letsencrypt-prod/g" ./manifests/prow.yaml
sed -i 's/          gcs_configuration:\n            bucket: gs://your-bucket-name\n            path_strategy: explicit\n          gcs_credentials_secret: gcs-credentials\n//g' ./manifests/prow.yaml
#+end_src

** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/prow.yaml
#+end_src
