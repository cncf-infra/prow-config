---
# Source: prow/templates/serviceaccount-crier.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-crier
  namespace: prow
  labels:
    app.kubernetes.io/component: crier
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-deck.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-hook-setupjob.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-hook.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-horologium.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-horologium
  namespace: prow
  labels:
    app.kubernetes.io/component: horologium
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-plank.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-plank
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-sinker.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-sinker
  namespace: prow
  labels:
    app.kubernetes.io/component: sinker
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-statusreconciler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-statusreconciler
  namespace: prow
  labels:
    app.kubernetes.io/component: statusreconciler
    app.kubernetes.io/name: prow
---
# Source: prow/templates/serviceaccount-tide.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-tide
  namespace: prow
  labels:
    app.kubernetes.io/component: tide
    app.kubernetes.io/name: prow
---
# Source: prow/templates/secret-s3-credentials-test-pods.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prow-s3-credentials
  namespace: prow-workloads
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
stringData:
  service-account.json: |
    {
      "region": "minio",
      "access_key": "prow-minio",
      "endpoint": "prow-minio.prow.svc.cluster.local:9000",
      "insecure": true,
      "s3_force_path_style": true,
      "secret_key": "prow-minio"
    }
---
# Source: prow/templates/secret-s3-credentials.yaml
apiVersion: v1
kind: Secret
metadata:
  name: prow-s3-credentials
  namespace: prow
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
stringData:
  service-account.json: |
    {
      "region": "minio",
      "access_key": "prow-minio",
      "endpoint": "prow-minio.prow.svc.cluster.local:9000",
      "insecure": true,
      "s3_force_path_style": true,
      "secret_key": "prow-minio"
    }
---
# Source: prow/templates/role-crier-test-pods.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-crier
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - "pods"
      - "events"
    verbs:
      - "get"
      - "list"
  - apiGroups:
      - ""
    resources:
      - "pods"
    verbs:
      - "patch"
---
# Source: prow/templates/role-crier.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-crier
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      - patch
---
# Source: prow/templates/role-deck-test-pods.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-deck
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - pods/log
    verbs:
      - get
---
# Source: prow/templates/role-deck.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - list
      - watch
      # Required when deck runs with `--rerun-creates-job=true`
      # **Warning:** Only use this for non-public deck instances, this allows
      # anyone with access to your Deck instance to create new Prowjobs
      # - create
---
# Source: prow/templates/role-hook-setupjob.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - update
---
# Source: prow/templates/role-hook.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - get
      - list
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
      - get
      - update
---
# Source: prow/templates/role-horologium.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-horologium
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - watch
---
# Source: prow/templates/role-plank-test-pods.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-plank-test-pods
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - create
      - list
---
# Source: prow/templates/role-plank.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-plank
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - get
      - create
      - list
      - watch
      - update
      - patch
---
# Source: prow/templates/role-sinker-test-pods.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-sinker
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - delete
      - list
      - watch
      - get
      - patch
---
# Source: prow/templates/role-sinker.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-sinker
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - delete
      - list
      - watch
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - prow-sinker-leaderlock
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
      - events
    verbs:
      - create
---
# Source: prow/templates/role-statusreconciler.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-statusreconciler
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
---
# Source: prow/templates/role-tide.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-tide
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - get
      - watch
---
# Source: prow/templates/rolebinding-crier-test-pods.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-crier
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-crier
subjects:
- kind: ServiceAccount
  name: prow-crier
  namespace: prow
---
# Source: prow/templates/rolebinding-crier.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-crier
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-crier
subjects:
- kind: ServiceAccount
  name: prow-crier
  namespace: prow
---
# Source: prow/templates/rolebinding-deck-test-pods.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-deck
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-deck
subjects:
- kind: ServiceAccount
  name: prow-deck
  namespace: prow
---
# Source: prow/templates/rolebinding-deck.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-deck
subjects:
- kind: ServiceAccount
  name: prow-deck
  namespace: prow
---
# Source: prow/templates/rolebinding-hook-setupjob.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-hook-setupjob
subjects:
- kind: ServiceAccount
  name: prow-hook-setupjob
  namespace: prow
---
# Source: prow/templates/rolebinding-hook.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-hook
subjects:
- kind: ServiceAccount
  name: prow-hook
  namespace: prow
---
# Source: prow/templates/rolebinding-horologium.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-horologium
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-horologium
subjects:
- kind: ServiceAccount
  name: prow-horologium
  namespace: prow
---
# Source: prow/templates/rolebinding-plank-test-pods.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-plank-test-pods
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-plank-test-pods
subjects:
- kind: ServiceAccount
  name: prow-plank
  namespace: prow
---
# Source: prow/templates/rolebinding-plank.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-plank
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-plank
subjects:
- kind: ServiceAccount
  name: prow-plank
  namespace: prow
---
# Source: prow/templates/rolebinding-sinker-test-pods.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-sinker
  namespace: prow-workloads
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-sinker
subjects:
- kind: ServiceAccount
  name: prow-sinker
  namespace: prow
---
# Source: prow/templates/rolebinding-sinker.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-sinker
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-sinker
subjects:
- kind: ServiceAccount
  name: prow-sinker
  namespace: prow
---
# Source: prow/templates/rolebinding-statusreconciler.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-statusreconciler
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-statusreconciler
subjects:
- kind: ServiceAccount
  name: prow-statusreconciler
  namespace: prow
---
# Source: prow/templates/rolebinding-tide.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-tide
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-tide
subjects:
- kind: ServiceAccount
  name: prow-tide
  namespace: prow
---
# Source: prow/templates/service-deck.yaml
apiVersion: v1
kind: Service
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
---
# Source: prow/templates/service-ghproxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: prow-ghproxy
  namespace: prow
  labels:
    app.kubernetes.io/component: ghproxy
    app.kubernetes.io/name: prow
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8888
      protocol: TCP
      name: http
    - name: metrics
      port: 9090
  selector:
    app.kubernetes.io/component: ghproxy
    app.kubernetes.io/name: prow
---
# Source: prow/templates/service-hook.yaml
apiVersion: v1
kind: Service
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
spec:
  type: ClusterIP
  ports:
    - port: 8888
      targetPort: 8888
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
---
# Source: prow/templates/service-minio.yaml
apiVersion: v1
kind: Service
metadata:
  name: prow-minio
  namespace: prow
  labels:
    app.kubernetes.io/component: minio
    app.kubernetes.io/name: prow
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: minio
    app.kubernetes.io/name: prow
---
# Source: prow/templates/service-tide.yaml
apiVersion: v1
kind: Service
metadata:
  name: prow-tide
  namespace: prow
  labels:
    app.kubernetes.io/component: tide
    app.kubernetes.io/name: prow
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8888
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: tide
    app.kubernetes.io/name: prow
---
# Source: prow/templates/deployment-crier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-crier
  namespace: prow
  labels:
    app.kubernetes.io/component: crier
    app.kubernetes.io/name: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: crier
      app.kubernetes.io/name: prow
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: crier
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-crier
      terminationGracePeriodSeconds: 30
      securityContext:
        {}
      containers:
        - name: prow-crier
          securityContext:
            {}
          image: "gcr.io/k8s-prow/crier:v20210504-af1ac03335"
          args:
            - --github-endpoint=http://ghproxy.prow
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
            - --github-token-path=/etc/github/oauth
            - --s3-credentials-file=/etc/s3-credentials/service-account.json
            - --blob-storage-workers=10
            - --github-workers=10
            - --kubernetes-blob-storage-workers=10
            - --github-endpoint=https://api.github.com
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: github-secrets-token
              mountPath: /etc/github/oauth
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: s3-credentials
              mountPath: /etc/s3-credentials
              readOnly: true
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: config
        configMap:
          name: prow-config
      - name: plugins
        configMap:
          name: prow-plugins
      - name: s3-credentials
        secret:
          secretName: prow-s3-credentials
---
# Source: prow/templates/deployment-deck.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: deck
      app.kubernetes.io/name: prow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: deck
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-deck
      terminationGracePeriodSeconds: 30
      securityContext:
        {}
      containers:
        - name: prow-deck
          securityContext:
            {}
          image: "gcr.io/k8s-prow/deck:v20210504-af1ac03335"
          args:
            - --tide-url=http://prow-tide.prow:80/
            - --hook-url=http://prow-hook.prow:8888/plugin-help
            - --github-endpoint=http://prow-ghproxy.prow
            - --config-path=/etc/config/config.yaml
            - --cookie-secret=/etc/cookie/secret
            - --github-endpoint=https://api.github.com
            - --github-oauth-config-file=/etc/githuboauth/secret
            - --github-token-path=/etc/github/oauth
            - --oauth-url=/github-login
            - --plugin-config=/etc/plugins/plugins.yaml
            - --rerun-creates-job
            - --s3-credentials-file=/etc/s3-credentials/service-account.json
            - --spyglass=true
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: github-secrets-token
              mountPath: /etc/github/oauth
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
            - name: s3-credentials
              mountPath: /etc/s3-credentials
              readOnly: true
            - name: github-secrets-cookie
              mountPath: /etc/cookie
              readOnly: true
            - name: github-oauth-config
              mountPath: /etc/githuboauth
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            initialDelaySeconds: 1
            periodSeconds: 3
            timeoutSeconds: 600
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: github-secrets-cookie
        secret:
          defaultMode: 420
          secretName: prow-github-cookie
      - name: github-oauth-config
        secret:
          defaultMode: 420
          secretName: prow-github-oauth-config
      - name: config
        configMap:
          name: prow-config
      - name: plugins
        configMap:
          name: prow-plugins
      - name: s3-credentials
        secret:
          secretName: prow-s3-credentials
---
# Source: prow/templates/deployment-ghproxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-ghproxy
  namespace: prow
  labels:
    app.kubernetes.io/component: ghproxy
    app.kubernetes.io/name: prow
  annotations:
    prow/release-revision: "1"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: ghproxy
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: ghproxy
        app.kubernetes.io/name: prow
    spec:
      terminationGracePeriodSeconds: 180
      securityContext:
        {}
      containers:
        - name: prow-ghproxy
          securityContext:
            {}
          image: "gcr.io/k8s-prow/ghproxy:v20210504-af1ac03335"
          args:
            - --cache-dir=/cache
            - --cache-sizeGB=99
            - --push-gateway=pushgateway
            - --serve-metrics=true
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: cache
              mountPath: /cache
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          resources:
            {}
      volumes:
      - name: cache
        emptyDir: {}
---
# Source: prow/templates/deployment-hook.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: hook
      app.kubernetes.io/name: prow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: hook
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-hook
      terminationGracePeriodSeconds: 180
      securityContext:
        {}
      containers:
        - name: prow-hook
          securityContext:
            {}
          image: "gcr.io/k8s-prow/hook:v20210504-af1ac03335"
          args:
            - --github-endpoint=http://prow-ghproxy.prow
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
            - --github-endpoint=https://api.github.com
            - --github-token-path=/etc/github/oauth
            - --hmac-secret-file=/etc/github/hmac
          imagePullPolicy: IfNotPresent
          env:
          volumeMounts:
            - name: github-secrets-hmac
              mountPath: /etc/github/hmac
              subPath: hmac
              readOnly: true
            - name: github-secrets-token
              mountPath: /etc/github/oauth
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 3
            timeoutSeconds: 600
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: github-secrets-hmac
        secret:
          defaultMode: 420
          secretName: prow-github-hmac
      - name: config
        configMap:
          name: prow-config
      - name: plugins
        configMap:
          name: prow-plugins
---
# Source: prow/templates/deployment-horologium.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-horologium
  namespace: prow
  labels:
    app.kubernetes.io/component: horologium
    app.kubernetes.io/name: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: horologium
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: horologium
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-horologium
      securityContext:
        {}
      terminationGracePeriodSeconds: 
      containers:
        - name: prow-horologium
          securityContext:
            {}
          image: "gcr.io/k8s-prow/horologium:v20210504-af1ac03335"
          args:
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
          resources:
            {}
      volumes:
      - name: config
        configMap:
          name: prow-config
---
# Source: prow/templates/deployment-minio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-minio
  namespace: prow
  labels:
    app.kubernetes.io/component: minio
    app.kubernetes.io/name: prow
  annotations:
    prow/release-revision: "1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: minio
      app.kubernetes.io/name: prow
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: minio
        app.kubernetes.io/name: prow
    spec:
      securityContext:
        {}
      containers:
        - name: prow-minio
          securityContext:
            {}
          image: "minio/minio:latest"
          args:
            - server
            - /data
          imagePullPolicy: IfNotPresent
          env:
            - name: MINIO_ACCESS_KEY
              value: prow-minio
            - name: MINIO_SECRET_KEY
              value: prow-minio
            - name: MINIO_REGION_NAME
              value: minio
          volumeMounts:
            - name: data
              mountPath: "/data"
          livenessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            periodSeconds: 20
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
      initContainers:
        - name: prow-minio-init-buckets
          image: "minio/minio:latest"
          command:
            - mkdir
            - -p
            - /data/prow-logs
            - /data/tide
            - /data/status-reconciler
          volumeMounts:
            - name: data
              mountPath: "/data"
      volumes:
        - name: data
          emptyDir: {}
---
# Source: prow/templates/deployment-plank.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-plank
  namespace: prow
  labels:
    app.kubernetes.io/component: plank
    app.kubernetes.io/name: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: plank
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: plank
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-plank
      securityContext:
        {}
      containers:
        - name: prow-plank
          securityContext:
            {}
          image: "gcr.io/k8s-prow/plank:v20200820-86c379653b"
          args:
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: github-secrets-token
              mountPath: /etc/github
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: config
        configMap:
          name: prow-config
---
# Source: prow/templates/deployment-sinker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-sinker
  namespace: prow
  labels:
    app.kubernetes.io/component: sinker
    app.kubernetes.io/name: prow
  annotations:
    checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
    prow/release-revision: "1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: sinker
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: sinker
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-sinker
      securityContext:
        {}
      containers:
        - name: prow-sinker
          securityContext:
            {}
          image: "gcr.io/k8s-prow/sinker:v20210504-af1ac03335"
          args:
            - -deck-url=http://deck.prow
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: /etc/config
              readOnly: true
          resources:
            {}
      volumes:
      - name: config
        configMap:
          name: prow-config
---
# Source: prow/templates/deployment-statusreconciler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-statusreconciler
  namespace: prow
  labels:
    app.kubernetes.io/component: statusreconciler
    app.kubernetes.io/name: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: statusreconciler
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: statusreconciler
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-statusreconciler
      terminationGracePeriodSeconds: 180
      securityContext:
        {}
      containers:
        - name: prow-statusreconciler
          securityContext:
            {}
          image: "gcr.io/k8s-prow/status-reconciler:v20210504-af1ac03335"
          args:
            - --dry-run=false
            - --continue-on-error=true
            - --plugin-config=/etc/plugins/plugins.yaml
            - --config-path=/etc/config/config.yaml
            - --github-token-path=/etc/github/oauth
            - --s3-credentials-file=/etc/s3-credentials/service-account.json
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: github-secrets-token
              mountPath: /etc/github/oauth
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
            - name: s3-credentials
              mountPath: /etc/s3-credentials
              readOnly: true
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: config
        configMap:
          name: prow-config
      - name: plugins
        configMap:
          name: prow-plugins
      - name: s3-credentials
        secret:
          secretName: prow-s3-credentials
---
# Source: prow/templates/deployment-tide.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prow-tide
  namespace: prow
  labels:
    app.kubernetes.io/component: tide
    app.kubernetes.io/name: prow
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: tide
      app.kubernetes.io/name: prow
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prow/release-revision: "1"
      labels:
        app.kubernetes.io/component: tide
        app.kubernetes.io/name: prow
    spec:
      serviceAccountName: prow-tide
      terminationGracePeriodSeconds: 180
      securityContext:
        {}
      containers:
        - name: prow-tide
          securityContext:
            {}
          image: "gcr.io/k8s-prow/tide:v20210504-af1ac03335"
          args:
            - --github-endpoint=http://prow-ghproxy.prow
            - --dry-run=false
            - --config-path=/etc/config/config.yaml
            - --github-token-path=/etc/github/oauth
            - --s3-credentials-file=/etc/s3-credentials/service-account.json
          env:
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: github-secrets-token
              mountPath: /etc/github/oauth
              subPath: oauth
              readOnly: true
            - name: config
              mountPath: /etc/config
              readOnly: true
            - name: s3-credentials
              mountPath: /etc/s3-credentials
              readOnly: true
          ports:
          - name: http
            containerPort: 8888
          resources:
            {}
      volumes:
      - name: github-secrets-token
        secret:
          defaultMode: 420
          secretName: prow-github-oauth
      - name: config
        configMap:
          name: prow-config
      - name: plugins
        configMap:
          name: prow-plugins
      - name: s3-credentials
        secret:
          secretName: prow-s3-credentials
---
# Source: prow/templates/hpa-deck.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: prow-deck
  namespace: prow
  labels:
    app.kubernetes.io/component: deck
    app.kubernetes.io/name: prow
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: prow-deck
  minReplicas: 2
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---
# Source: prow/templates/hpa-hook.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: prow-hook
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: prow-hook
  minReplicas: 2
  maxReplicas: 100
  metrics:
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: 80
---
# Source: prow/templates/job-hook-setup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: prow-hook-setup
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
spec:
  ttlSecondsAfterFinished: 200
  backoffLimit: 50
  backoffLimit: 4
  template:
    metadata:
      labels:
        app.kubernetes.io/component: hook
        app.kubernetes.io/name: prow
    spec:
      restartPolicy: OnFailure
      serviceAccountName: prow-hook-setupjob
      containers:
      - name: prow-hook-setupjob
        image: "gcr.io/k8s-prow/hmac:v20210504-af1ac03335"
        imagePullPolicy: IfNotPresent
        securityContext:
          null
        command:
        - /hmac
        args:
        - --config-path=/etc/config/config.yaml
        - --hook-url=https://${SHARINGIO_PAIR_BASE_DNS_NAME}/hook
        - --hmac-token-secret-name=prow-github-hmac
        - --hmac-token-secret-namespace=prow
        - --hmac-token-key=hmac
        - --github-token-path=/etc/github/oauth
        - --github-endpoint=http://ghproxy.prow
        - --github-endpoint=https://api.github.com
        - --kubeconfig-context=default
        - --dry-run=false
        env:
        volumeMounts:
          - name: github-secrets-token
            mountPath: /etc/github/oauth
            subPath: oauth
            readOnly: true
          - name: github-secrets-hmac
            mountPath: /etc/github/hmac
            subPath: hmac
            readOnly: true
          - name: config
            mountPath: /etc/config
            readOnly: true
      volumes:
        - name: github-secrets-token
          secret:
            defaultMode: 420
            secretName: prow-github-oauth
        - name: github-secrets-hmac
          secret:
            defaultMode: 420
            secretName: prow-github-hmac
        - name: config
          configMap:
            name: prow-config
---
# Source: prow/templates/cronjob-hook-setup.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: prow-hook-setup
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 200
      backoffLimit: 50
      backoffLimit: 4
      template:
        metadata:
          labels:
            app.kubernetes.io/component: hook
            app.kubernetes.io/name: prow
        spec:
          restartPolicy: OnFailure
          serviceAccountName: prow-hook-setupjob
          containers:
          - name: prow-hook-setupjob
            image: "gcr.io/k8s-prow/hmac:v20210504-af1ac03335"
            imagePullPolicy: IfNotPresent
            securityContext:
              null
            command:
            - /hmac
            args:
            - --config-path=/etc/config/config.yaml
            - --hook-url=https://${SHARINGIO_PAIR_BASE_DNS_NAME}/hook
            - --hmac-token-secret-name=prow-github-hmac
            - --hmac-token-secret-namespace=prow
            - --hmac-token-key=hmac
            - --github-token-path=/etc/github/oauth
            - --github-endpoint=http://ghproxy.prow
            - --github-endpoint=https://api.github.com
            - --kubeconfig-context=default
            - --dry-run=false
            env:
            volumeMounts:
              - name: github-secrets-token
                mountPath: /etc/github/oauth
                subPath: oauth
                readOnly: true
              - name: github-secrets-hmac
                mountPath: /etc/github/hmac
                subPath: hmac
                readOnly: true
              - name: config
                mountPath: /etc/config
                readOnly: true
          volumes:
            - name: github-secrets-token
              secret:
                defaultMode: 420
                secretName: prow-github-oauth
            - name: github-secrets-hmac
              secret:
                defaultMode: 420
                secretName: prow-github-hmac
            - name: config
              configMap:
                name: prow-config
---
# Source: prow/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prow
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
spec:
  tls:
    - hosts:
        - "prow.${SHARINGIO_PAIR_BASE_DNS_NAME}"
      secretName: letsencrypt-prod
  rules:
    - host: "prow.${SHARINGIO_PAIR_BASE_DNS_NAME}"
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: prow-deck
                port:
                  number: 80
          - path: /hook
            pathType: ImplementationSpecific
            backend:
              service:
                name: prow-hook
                port:
                  number: 8888
