* verify-conformance-release

The verify-conformance-release carries out the following checks

It checks that the
1. title of the PR contain a Kubernetes release
2. the paths to the files containing evidence of conformance contain the release quoted in the title
3. the commit patches contain the release quoted in the title of the

** Behaviour
#+begin_src feature :tangle ./kodata/features/verify-conformance-release.feature
Feature: A cool

  Background:
    Given a conformance product submission PR

  # Scenario: PR title is not empty
  #   Given a PR title
  #   Then the PR title is not empty

  # Scenario: Is true
  #   Given a <value>
  #   Then the value is "true"

  #   Examples:
  #     | value |
  #     | true  |
  #     | true  |
  #     | false |

  Scenario: submission contains all required files
    Given a conformance product submission PR
    Then <file> is included in its file list
    And <file> is not empty

    Examples:
      | file           |
      | "README.md"    |
      | "PRODUCT.yaml" |
      | "e2e.log"      |
      | "junit_01.xml" |

  Scenario: submission has files in structure of releaseversion/productname/
    Given the files in the PR
    Then file folder structure matches "(v1.[0-9]{2})/(.*)/.*"
    # $1 is the release version of Kubernetes
    # $2 is the product name
    # example: v1.23/coolthing/some.file

  Scenario: submission is only one product
    Given the files in the PR
    Then there is only one path of folders

  Scenario: the PRODUCT.yaml metadata contains required fields
    Given a "PRODUCT.yaml" file
    Then the yaml file "PRODUCT.yaml" contains the required and non-empty <field>
    And if <contentType> is set to url, the content of the url in the value of <field> matches it's <dataType>

    Examples:
      | field               | contentType | dataType                           |
      | "vendor"            | "info"      | "string"                           |
      | "name"              | "info"      | "string"                           |
      | "version"           | "info"      | "string"                           |
      | "type"              | "info"      | "string"                           |
      | "description"       | "info"      | "string"                           |
      | "website_url"       | "url"       | "text/html"                        |
      | "repo_url"          | "url"       | "text/html"                        |
      | "documentation_url" | "url"       | "text/html"                        |
      | "product_logo_url"  | "url"       | "image/svg application/postscript" |

  Scenario: title of product submission contains Kubernetes release version and product name
    Given the title of the PR
    Then the title of the PR matches "(.*) (v1.[0-9]{2})[ /](.*)"
    # $1 is the string for conformance results for
    # $2 is the version of Kubernetes
    # $3 is the product name
    # example: Conformance test for v1.23 Cool Engine

  Scenario: the e2e.log output contains the Kubernetes release version
    Given a "e2e.log" file
    Then a line of the file "e2e.log" matches "^.*e2e test version: (v1.[0-9]{2}(.[0-9]{1,2})?)$"
    # $1 is the release version of Kubernetes
    # $2 is the (optional) point release version of Kubernetes
    # example: Feb 25 10:20:32.383: INFO: e2e test version: v1.23.0

  Scenario: there are labels for tests succeeding
    Given a list of labels in the PR
    Then the label prefixed with <label> and ending with Kubernetes release version should be present

    Examples:
      | label              |
      | "no-failed-tests-" |
      | "tests-verified-"  |
    # example: no-failed-tests-v1.23
#+end_src

* Build locally
#+begin_src tmate :window prow-config
ko build --local -B --tags latest .
#+end_src

* Set up local dev
Log into GitHub regularly
#+begin_src tmate :window prow-config
gh auth login
#+end_src

Update the oauth secret
#+begin_src shell
kubectl -n prow create secret generic prow-github-oauth \
    --from-literal=oauth=<(yq e '."github.com".oauth_token' -P - < ~/.config/gh/hosts.yml) \
    --dry-run=client -o yaml \
    | kubectl apply -f -
#+end_src

#+RESULTS:
#+begin_example
secret/prow-github-oauth configured
#+end_example

* Running the plugin locally

The plugin can be run locally as follows, when run locally the plugin interacts with GitHub but by default does not make any changes
if you want to apply changes to the PR inspected then you can pass in the flag, dry-run=false

#+BEGIN_SRC shell
./verify-conformance-release --hmac-secret-file=/home/ii/.secret-hook --github-token-path=/home/ii/.secret-oauth --plugin-config=./vcr.yaml
#+END_SRC
