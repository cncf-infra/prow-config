#+TITLE: prow.cncf.io infrastructure

Terraform configuration for prow.cncf.io

* Dependencies
- [[https://www.terraform.io/downloads.html][terraform]]
- [[https://aws.amazon.com/cli/][aws cli]]
- [[https://kubernetes.io/docs/tasks/tools/install-kubectl/][kubectl]]
- [[https://helm.sh/docs/intro/install/][helm]]

* Initial things
** Configure aws cli
Log into the *cncf-apisnoop* Account (ID) and provide the CLI some security credentials
#+begin_src tmate :window prow-config
aws configure
#+end_src

** Install aws-iam-authenticator
#+begin_src shell
curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
curl -o aws-iam-authenticator.sha256 https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator.sha256
if [ ! "$(sha256sum aws-iam-authenticator | awk '{print $1}')" = "$(cat aws-iam-authenticator.sha256 | awk '{print $1}')" ]; then
    echo "bad aws-iam-authenticator"
    exit 1
fi
chmod +x ./aws-iam-authenticator
mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
rm aws-iam-authenticator.sha256
#+end_src

* Deploying the EKS cluster
** Make a bucket for tfstate
#+begin_src shell :results silent
aws s3 mb s3://prow-cncf-io-tfstate --region ap-southeast-2
#+end_src

** Init

Initialize terraform with the plugins that are required.
#+begin_src tmate :window prow-config
terraform init
#+end_src

** Plan

Using plan, verify that the actions performed will be the correct ones.
#+begin_src tmate :window prow-config
terraform plan
#+end_src

** Apply

Create the infrastructure using apply.
#+begin_src tmate :window prow-config
terraform apply -auto-approve
#+end_src

** Configure kubectl to use the new cluster

Find the cluster name:
#+begin_src tmate :window prow-config
aws eks list-clusters --region ap-southeast-2
#+end_src

Set current context to be the newly created cluster
#+begin_src tmate :window prow-config
aws eks --region ap-southeast-2 update-kubeconfig --name prow-cncf-io-eks
#+end_src

Check cluster connectivity:
#+BEGIN_SRC tmate :window prow-config
kubectl cluster-info
#+END_SRC

* Install core services
** nginx-ingress
*** Prepare
#+name: add stable helm repo
#+begin_src shell :results silent
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#+end_src

#+name: create nginx-ingress namespace
#+begin_src shell :results silent
kubectl create ns nginx-ingress -o yaml --dry-run=client \
    | kubectl apply -f -
#+end_src

*** Configure
#+name: nginx ingress values
#+begin_src yaml :tangle ./manifests/nginx-ingress-values.yaml
controller:
  service:
    externalTrafficPolicy: Local
    type: LoadBalancer
  publishService:
    enabled: true
  ingressClassResource:
    default: true
  config:
    service-tokens: "false"
    use-proxy-protocol: "false"
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
  metrics:
    enabled: true
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ingress-nginx
          topologyKey: "kubernetes.io/hostname"

serviceAccount:
  create: true

rbac:
  create: true
#+end_src

*** Template
#+name: install nginx-ingress
#+begin_src shell :results silent
helm template nginx-ingress  \
    -f ./manifests/nginx-ingress-values.yaml \
    --namespace nginx-ingress \
    --version 4.0.18 \
    ingress-nginx/ingress-nginx \
    > ./manifests/nginx-ingress.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/nginx-ingress.yaml
#+end_src

*** Observe

#+begin_src shell :results silent
kubectl -n nginx-ingress get pods
#+end_src

#+begin_src shell :results silent
kubectl -n nginx-ingress get svc
#+END_SRC

** Cert-Manager
*** Prepare
#+begin_src shell :results silent
curl -L -o ./manifests/cert-manager.yaml https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/cert-manager.yaml
#+end_src

*** Observe
#+begin_src tmate :window prow-config
kubectl -n cert-manager get pods
#+END_SRC

* Certificates
** Configure
#+begin_src yaml :tangle ./manifests/certs.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: prow-cncf-io@ii.coop
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: letsencrypt-prod
  namespace: prow
spec:
  secretName: letsencrypt-prod
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - prow.cncf.io
#+end_src

** Install certs
#+begin_src shell
kubectl apply -f ./manifests/certs.yaml
#+end_src

#+RESULTS:
#+begin_example
clusterissuer.cert-manager.io/letsencrypt-prod created
certificate.cert-manager.io/letsencrypt-prod created
#+end_example

* Install Prow
** Notes
- a GitHub app must be created according to https://github.com/kubernetes/test-infra/blob/master/prow/getting_started_deploy.md#github-app

** Prepare
Download the resources
#+begin_src shell :results silent
curl -o ./manifests/prowjob-crd.yaml -L https://github.com/kubernetes/test-infra/raw/master/config/prow/cluster/prowjob-crd/prowjob_customresourcedefinition.yaml
curl -o ./manifests/prow.yaml -L https://github.com/kubernetes/test-infra/raw/master/config/prow/cluster/starter/starter-s3.yaml
#+end_src

Create the namespace
#+begin_src shell :results silent
kubectl create namespace prow --dry-run=client -o yaml \
    | kubectl apply -f -
#+end_src

Prepare the environment for env config
#+begin_src tmate :window prow-config
export GITHUB_APP_SECRET="$(kubectl -n prow get secret github-token -o=go-template='{{.data.cert | base64decode }}' || true)" ; \
export GITHUB_APP_ID="$(kubectl -n prow get secret github-token -o=go-template='{{.data.appid | base64decode }}' || true)" ; \
(
    [ -z "${GITHUB_APP_ID}" ] && \
    read -p 'GITHUB_APP_ID: ' GITHUB_APP_ID && \
    echo "${GITHUB_APP_ID}" > /tmp/GITHUB_APP_ID.txt
) && \
(
    [ -z "${GITHUB_APP_SECRET}" ] && \
    echo "Past content of GITHUB_APP_SECRET and C-c to exit" && \
    cat > /tmp/GITHUB_APP_SECRET.cert
)
#+end_src

Set the value of GITHUB_APP_SECRET into env
#+begin_src tmate :window prow-config
export GITHUB_APP_SECRET="$(echo -e "${GITHUB_APP_SECRET:-"$(cat /tmp/GITHUB_APP_SECRET.cert | base64 | tr -d '\n')"}")"
export GITHUB_APP_ID="$(echo -e "${GITHUB_APP_ID:-"$(cat /tmp/GITHUB_APP_ID.txt | tr -d '\n' | base64)"}")"
#+end_src

** Template
#+begin_src tmate :window prow-config
GITHUB_ORG=cncf-infra
MINIO_USER=minio
MINIO_PASSWORD='MinioiisC00l!!'
# resolves to prow.cncf.io in the config
PROW_DOMAIN=cncf.io

# sed -i "s/cert:/cert: |\n   /g" ./manifests/prow.yaml
sed -i -z 's,github-token\nstringData,github-token\ndata,g' ./manifests/prow.yaml
sed -i "s/<<insert-downloaded-cert-here>>/\${GITHUB_APP_SECRET}/g" ./manifests/prow.yaml
sed -i "s/<<insert-the-app-id-here>>/\"\${GITHUB_APP_ID}\"/g" ./manifests/prow.yaml
sed -i "s/<< insert-hmac-token-here >>/\"\${GITHUB_WEBHOOK_HMAC}\"/g" ./manifests/prow.yaml
sed -i "s/<< your-domain.com >>/${PROW_DOMAIN}/g" ./manifests/prow.yaml
sed -i "s/<< your_github_org >>/${GITHUB_ORG}/g" ./manifests/prow.yaml
sed -i "s/<<CHANGE_ME_MINIO_ROOT_USER>>/${MINIO_USER}/g" ./manifests/prow.yaml
sed -i "s/<<CHANGE_ME_MINIO_ROOT_PASSWORD>>/${MINIO_PASSWORD}/g" ./manifests/prow.yaml
sed -i "s/cert-manager.io\/cluster-issuer: letsencrypt-staging/cert-manager.io\/cluster-issuer: letsencrypt-prod/g" ./manifests/prow.yaml
sed -i "s/defaultBackend/tls:\n    - hosts:\n        - prow.cncf.io\n      secretName: letsencrypt-prod\n  defaultBackend/g" ./manifests/prow.yaml
sed -i "s/interval: 1m/interval: 6h/g" ./manifests/prow.yaml
#+end_src

** Configure
#+begin_src yaml :tangle ./manifests/prow-hook-setup.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/component: hook
    app.kubernetes.io/name: prow
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prow-hook-setupjob
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prow-hook-setupjob
subjects:
- kind: ServiceAccount
  name: prow-hook-setupjob
  namespace: prow
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: prow-hook-setup
  namespace: prow
  labels:
    app.kubernetes.io/name: prow
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 200
      backoffLimit: 4
      template:
        metadata:
          labels:
            app.kubernetes.io/component: hook
            app.kubernetes.io/name: prow
        spec:
          restartPolicy: OnFailure
          serviceAccountName: prow-hook-setupjob
          containers:
          - name: prow-hook-setupjob
            image: "gcr.io/k8s-prow/hmac:v20220310-033172a69b"
            imagePullPolicy: IfNotPresent
            command:
            - /hmac
            args:
            - --config-path=/etc/config/config.yaml
            - --hook-url=https://prow.cncf.io/hook
            - --hmac-token-secret-name=hmac-token
            - --hmac-token-secret-namespace=prow
            - --hmac-token-key=hmac
            - --github-app-id=$(GITHUB_APP_ID)
            - --github-app-private-key-path=/etc/github/cert
            - --github-endpoint=http://ghproxy.prow
            - --github-endpoint=https://api.github.com
            - --kubeconfig-context=default
            - --dry-run=false
            env:
              - name: GITHUB_APP_ID
                valueFrom:
                  secretKeyRef:
                    name: github-token
                    key: appid
            volumeMounts:
              - name: github-token
                mountPath: /etc/github
                readOnly: true
              - name: github-secrets-hmac
                mountPath: /etc/github/hmac
                subPath: hmac
                readOnly: true
              - name: config
                mountPath: /etc/config
                readOnly: true
          volumes:
            - name: github-token
              secret:
                defaultMode: 420
                secretName: github-token
            - name: hmac-token
              secret:
                defaultMode: 420
                secretName: hmac-token
            - name: config
              configMap:
                name: config
#+end_src

** Install
#+begin_src tmate :window prow-config
GITHUB_WEBHOOK_HMAC="$(kubectl -n prow get secret hmac-token -o=go-template='{{.data.hmac | base64decode }}' || true)"
export \
    GITHUB_WEBHOOK_HMAC="${GITHUB_WEBHOOK_HMAC:-$(openssl rand -hex 20)}"

kubectl apply --server-side -f ./manifests/prowjob-crd.yaml
envsubst < ./manifests/prow.yaml | kubectl apply -f -
#+end_src

** Finalise
ensure that the value of ~$GITHUB_WEBHOOK_HMAC~ is set in the GitHub app under Webhook -> Webhook secret

* Install verify-conformance plugin
** Configure
#+begin_src yaml :tangle ./manifests/verify-conformance-config.yaml
external_plugins:
  # cncf/k8s-conformance:
  # - name: verify-conformance-release
  #   events:
  #     - issue_comment
  #     - pull_request

  cncf-infra/k8s-conformance:
  - name: verify-conformance-release
    events:
      - issue_comment
      - pull_request
#+end_src

#+begin_src yaml :tangle ./manifests/verify-conformance.yaml
# Copyright 2022 CNCF
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: verify-conformance-release
  namespace: prow
  labels:
    app: verify-conformance-release
spec:
  replicas: 1
  selector:
    matchLabels:
      app: verify-conformance-release
  template:
    metadata:
      labels:
        app: verify-conformance-release
    spec:
      terminationGracePeriodSeconds: 180
      containers:
        - name: verify-conformance-release
          image: 928655657136.dkr.ecr.ap-southeast-2.amazonaws.com/verify-conformance-release@sha256:ddaf44b39f9ae8a76fe87412773443586edd8ee7bb72de500a2b5b253654d1c4
          imagePullPolicy: IfNotPresent
          args:
            - --github-endpoint=http://prow-ghproxy
            - --github-endpoint=https://api.github.com
            - --dry-run=false
            - --hmac-secret-file=/etc/webhook/hmac
            - --plugin-config=/plugin/vcr.yaml
            - --update-period=5m
            - --github-app-id=$(GITHUB_APP_ID)
            - --github-app-private-key-path=/etc/github/cert
          env:
          - name: GITHUB_APP_ID
            valueFrom:
              secretKeyRef:
                name: github-token
                key: appid
          ports:
            - name: http
              containerPort: 8888
          volumeMounts:
            - name: hmac
              mountPath: /etc/webhook
              readOnly: true
            - name: oauth
              mountPath: /etc/github
              readOnly: true
            - name: plugins
              mountPath: /etc/plugins
              readOnly: true
            - name: vcr-config
              mountPath: /plugin/vcr.yaml
              subPath: vcr.yaml
              readOnly: true
      volumes:
        - name: hmac
          secret:
            secretName: hmac-token
        - name: oauth
          secret:
            secretName: github-token
        - name: plugins
          configMap:
            name: plugins
        - name: vcr-config
          configMap:
            name: vcr-config
#+end_src

** Install
#+begin_src shell
kubectl -n prow create configmap vcr-config --from-file=vcr.yaml=./manifests/verify-conformance-config.yaml --dry-run=client -o yaml \
    | kubectl -n prow apply -f -
kubectl -n prow apply -f ./manifests/verify-conformance.yaml
#+end_src

#+RESULTS:
#+begin_example
configmap/vcr-config configured
deployment.apps/verify-conformance-release configured
#+end_example
