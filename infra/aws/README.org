#+TITLE: prow.cncf.io infrastructure

Terraform configuration for prow.cncf.io

* Dependencies
- [[https://www.terraform.io/downloads.html][terraform]]
- [[https://aws.amazon.com/cli/][aws cli]]
- [[https://kubernetes.io/docs/tasks/tools/install-kubectl/][kubectl]]
- [[https://helm.sh/docs/intro/install/][helm]]

* Initial things
** Configure aws cli
Log into the *cncf-apisnoop* Account (ID) and provide the CLI some security credentials
#+begin_src tmate :window prow-config
aws configure
#+end_src

* Deploying
** Init

Initialize terraform with the plugins that are required.
#+begin_src tmate :window prow-config
terraform init
#+end_src

** Plan

Using plan, verify that the actions performed will be the correct ones.
#+begin_src tmate :window prow-config
terraform plan
#+end_src

** Apply

Create the infrastructure using apply.
#+begin_src tmate :window prow-config
terraform apply -auto-approve
#+end_src

** Configure kubectl to use the new cluster

Find the cluster name:
#+begin_src tmate :window prow-config
aws eks list-clusters
#+end_src

Set current context to be the newly created cluster
#+begin_src tmate :window prow-config
aws eks --region ap-southeast-2 update-kubeconfig --name prow-cncf-io-eks
#+end_src

Check cluster connectivity:
#+BEGIN_SRC shell
kubectl cluster-info
#+END_SRC

* Install core services
** nginx-ingress
*** Prepare
#+name: add stable helm repo
#+begin_src shell :results silent
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
#+end_src

#+name: create nginx-ingress namespace
#+begin_src shell :results silent
kubectl create ns nginx-ingress -o yaml --dry-run=client \
    | kubectl apply -f -
#+end_src

*** Configure
#+name: nginx ingress values
#+begin_src yaml :tangle ./manifests/nginx-ingress-values.yaml
controller:
  service:
    externalTrafficPolicy: Local
    type: LoadBalancer
  publishService:
    enabled: true
  config:
    service-tokens: "false"
    use-proxy-protocol: "false"
    compute-full-forwarded-for: "true"
    use-forwarded-headers: "true"
  metrics:
    enabled: true
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - ingress-nginx
          topologyKey: "kubernetes.io/hostname"

serviceAccount:
  create: true

rbac:
  create: true
#+end_src

*** Template
#+name: install nginx-ingress
#+begin_src shell :results silent
helm template nginx-ingress  \
    -f ./manifests/nginx-ingress-values.yaml \
    --namespace nginx-ingress \
    --version 4.0.18 \
    ingress-nginx/ingress-nginx \
    > ./manifests/nginx-ingress.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/nginx-ingress.yaml
#+end_src

*** Observe

#+begin_src shell :results silent
kubectl -n nginx-ingress get pods
#+end_src

#+begin_src shell :results silent
kubectl -n nginx-ingress get svc
#+END_SRC

** Cert-Manager
*** Prepare
#+begin_src shell :results silent
curl -L -o ./manifests/cert-manager.yaml https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.yaml
#+end_src

*** Install
#+begin_src shell :results silent
kubectl apply -f ./manifests/cert-manager.yaml
#+end_src

*** Observe
#+begin_src tmate :window prow-config
kubectl -n cert-manager get pods
#+END_SRC

* Install Prow
** Prepare
#+begin_src shell :results silent
curl -o ./manifests/prowjob-crd.yaml -L https://github.com/kubernetes/test-infra/raw/master/config/prow/cluster/prowjob-crd/prowjob_customresourcedefinition.yaml
curl -o ./manifests/prow.yaml -L https://github.com/kubernetes/test-infra/raw/master/config/prow/cluster/starter/starter-s3.yaml
#+end_src

*** Template
#+begin_src shell :results silent
GITHUB_APP_ID='${GITHUB_APP_ID}'
GITHUB_APP_SECRET='${GITHUB_APP_SECRET}'
GITHUB_WEBHOOK_HMAC='${GITHUB_WEBHOOK_HMAC}'
GITHUB_ORG=cncf-infra
MINIO_USER=minio
MINIO_PASSWORD=MinioiisC00l!!
# resolves to prow.cncf.io in the config
PROW_DOMAIN=cncf.io

sed -i "s/<<insert-downloaded-cert-here>>/${GITHUB_APP_SECRET}/g" ./manifests/prow.yaml
sed -i "s/<<insert-the-app-id-here>>/${GITHUB_APP_ID}/g" ./manifests/prow.yaml
sed -i "s/<< insert-hmac-token-here >>/${GITHUB_WEBHOOK_HMAC}/g" ./manifests/prow.yaml
sed -i "s/<< your-domain.com >>/${PROW_DOMAIN}/g" ./manifests/prow.yaml
sed -i "s/<< your_github_org >>/${GITHUB_ORG}/g" ./manifests/prow.yaml
sed -i "s/<<CHANGE_ME_MINIO_ROOT_USER>>/${MINIO_USER}/g" ./manifests/prow.yaml
sed -i "s/<<CHANGE_ME_MINIO_ROOT_PASSWORD>>/${MINIO_PASSWORD}/g" ./manifests/prow.yaml
sed -i "s/cert-manager.io\/cluster-issuer: letsencrypt-staging/cert-manager.io\/cluster-issuer: letsencrypt-prod/g" ./manifests/prow.yaml
#+end_src

** Install
#+begin_src shell :results silent
export \
    GITHUB_WEBHOOK_HMAC="$(openssl rand -hex 20)"

kubectl apply -f ./manifests/prowjob-crd.yaml
envsubst < ./manifests/prow.yaml | kubectl apply -f -
#+end_src
